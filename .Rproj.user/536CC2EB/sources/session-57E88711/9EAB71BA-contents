
implement <-

  function(data, Y, A, B, C, ID, se_type = "stata", ...) {

    data <- data|>
      dplyr::mutate(id = !!as.name(ID),
             y = !!as.name(Y),
             a = !!as.name(A),
             b = !!as.name(B),
             c = !!as.name(C),
             a_2 = a^2, b_2 = b^2, c_2 = c^2)

    estimatr::lm_robust(
      y ~ a + a_2 + b + b_2 + c + c_2 + a:b + a:c + b:c,
      data = data,
      fixed_effects = ~ id,
      se_type = "stata", ...)
  }


fitted_values <- function(
    model,
    a_min = -1, a_max = 1, a_step = 1,
    b_min = -1, b_max = 1, b_step = .1,
    c_min = -1, c_max = 1, c_step = .1) {

  df <- expand_grid(
    a = seq(a_min, a_max, a_step),
    b = seq(b_min, b_max, b_step),
    c = seq(c_min, c_max, c_step),
    id = model$felevels$id[1:2])|>
  mutate(a_2 = a^2, b_2 = b^2, c_2 = c^2)

  df |> mutate(utility = predict(model, newdata = df))
}


plot_cjEuclid <-
  function(predictions_df,
           ideal_color = "blue",
           x_vals = c("Least", "Moderately","Most"),
           y_vals  = c("Most\nExemptions", "Some\nExemptions", "Fewest\nExemptions"),
           x_breaks = c(-.9,0,.9),
           y_breaks = c(-.9,0,.9))
  predictions_df |>
  group_by(a) |>
  mutate(Utility = utility) |>
  mutate(Utility = (utility - min(utility))/(max(utility) - min(utility))) |>
  ungroup() |>
  ggplot() +
  geom_tile(aes(x=b, y=c, fill=Utility)) +
  geom_contour(aes(x=b,y=c,z=utility), color="black") +
  facet_grid(~a) +
  scale_fill_gradientn("Utility", colours = rev(terrain.colors(10))) +
  coord_fixed() +
  theme(plot.title = element_text(size = 20))+
  theme(axis.text=element_text(size = 20)) +
  theme(axis.text.x = element_text(size = 20)) +
  theme(strip.text.x = element_text(size = 20))+
  theme(legend.text=element_text(size=20))+
  theme_bw() +
  geom_point(data = predictions_df  |> group_by(a) |>
               dplyr::filter(utility == max(utility)),
             mapping = aes(b, c),
             color = ideal_color) +
  scale_x_continuous(breaks=x_breaks, labels = x_vals)  +
  scale_y_continuous(breaks=y_breaks, labels = y_vals)



#' Fit generalized Euclidean preferences model
#'
#' @param data A \code{data.frame}.
#' @param A, B, C, Y names of policy and outcome variables
#' @param x_vals labels for x axis
#' @param y_vals labels for y axis
#' @param ideal_color Color for idea points
#' @return A  \code{list}
#' @import fabricatr
#' @import tidyverse
#' @keywords internal
#' @export
#' @examples
#' library(tidyverse)
#' library(DeclareDesign)
#' data <-
#' fabricatr::fabricate(
#'   ID = add_level(20),
#'   choice = add_level(2,
#'                      A = rnorm(N), B = rnorm(N), C = rnorm(N),
#'                      Y = -(A^2 + (B-.3)^2 + (C --.67)^2) + .2*rnorm(N) + 3*A*B))
#' out <- cjEuclid(data)
#' out$graph


cjEuclid <-

  function(data,
           Y = "Y", A = "A", B = "B", C = "C", ID = "ID",
           a_min = -1, a_max = 1, a_step = 1,
           b_min = -1, b_max = 1, b_step = .1,
           c_min = -1, c_max = 1, c_step = .1,
           ideal_color = "blue",
           x_vals = c("L", "M","H"),
           y_vals  = c("A", "B", "C"),
           x_breaks = c(-.9,0,.9),
           y_breaks = c(-.9,0,.9)

           ) {

    model <- implement(data, Y, A, B, C, ID)

    fitted <- fitted_values(model,
                            a_min = a_min, a_max = a_max, a_step = a_step,
                            b_min = b_min, b_max = b_max, b_step = b_step,
                            c_min = c_min, c_max = c_max, c_step = c_step)

    graph <- fitted |>
      plot_cjEuclid(
        ideal_color = ideal_color,
        x_vals = x_vals,
        y_vals  = y_vals,
        x_breaks = x_breaks,
        y_breaks = y_breaks)


    list(model = model, fitted = fitted, graph = graph)

    }

